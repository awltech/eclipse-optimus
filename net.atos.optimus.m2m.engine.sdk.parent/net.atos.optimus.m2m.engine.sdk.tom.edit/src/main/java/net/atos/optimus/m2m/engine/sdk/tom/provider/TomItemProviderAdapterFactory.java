/**
 */
package net.atos.optimus.m2m.engine.sdk.tom.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.atos.optimus.m2m.engine.sdk.tom.util.TomAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TomItemProviderAdapterFactory extends TomAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TomItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.atos.optimus.m2m.engine.sdk.tom.TransformationSets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationSetsItemProvider transformationSetsItemProvider;

	/**
	 * This creates an adapter for a {@link net.atos.optimus.m2m.engine.sdk.tom.TransformationSets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformationSetsAdapter() {
		if (transformationSetsItemProvider == null) {
			transformationSetsItemProvider = new TransformationSetsItemProvider(this);
		}

		return transformationSetsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.atos.optimus.m2m.engine.sdk.tom.TransformationSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationSetItemProvider transformationSetItemProvider;

	/**
	 * This creates an adapter for a {@link net.atos.optimus.m2m.engine.sdk.tom.TransformationSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformationSetAdapter() {
		if (transformationSetItemProvider == null) {
			transformationSetItemProvider = new TransformationSetItemProvider(this);
		}

		return transformationSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.atos.optimus.m2m.engine.sdk.tom.TransformationSetExtension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationSetExtensionItemProvider transformationSetExtensionItemProvider;

	/**
	 * This creates an adapter for a {@link net.atos.optimus.m2m.engine.sdk.tom.TransformationSetExtension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformationSetExtensionAdapter() {
		if (transformationSetExtensionItemProvider == null) {
			transformationSetExtensionItemProvider = new TransformationSetExtensionItemProvider(this);
		}

		return transformationSetExtensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.atos.optimus.m2m.engine.sdk.tom.Transformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationItemProvider transformationItemProvider;

	/**
	 * This creates an adapter for a {@link net.atos.optimus.m2m.engine.sdk.tom.Transformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformationAdapter() {
		if (transformationItemProvider == null) {
			transformationItemProvider = new TransformationItemProvider(this);
		}

		return transformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.atos.optimus.m2m.engine.sdk.tom.SelfRequirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelfRequirementItemProvider selfRequirementItemProvider;

	/**
	 * This creates an adapter for a {@link net.atos.optimus.m2m.engine.sdk.tom.SelfRequirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelfRequirementAdapter() {
		if (selfRequirementItemProvider == null) {
			selfRequirementItemProvider = new SelfRequirementItemProvider(this);
		}

		return selfRequirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.atos.optimus.m2m.engine.sdk.tom.ParentRequirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParentRequirementItemProvider parentRequirementItemProvider;

	/**
	 * This creates an adapter for a {@link net.atos.optimus.m2m.engine.sdk.tom.ParentRequirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParentRequirementAdapter() {
		if (parentRequirementItemProvider == null) {
			parentRequirementItemProvider = new ParentRequirementItemProvider(this);
		}

		return parentRequirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.atos.optimus.m2m.engine.sdk.tom.CustomRequirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomRequirementItemProvider customRequirementItemProvider;

	/**
	 * This creates an adapter for a {@link net.atos.optimus.m2m.engine.sdk.tom.CustomRequirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomRequirementAdapter() {
		if (customRequirementItemProvider == null) {
			customRequirementItemProvider = new CustomRequirementItemProvider(this);
		}

		return customRequirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.atos.optimus.m2m.engine.sdk.tom.ExternalTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalTransformationItemProvider externalTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link net.atos.optimus.m2m.engine.sdk.tom.ExternalTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalTransformationAdapter() {
		if (externalTransformationItemProvider == null) {
			externalTransformationItemProvider = new ExternalTransformationItemProvider(this);
		}

		return externalTransformationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (transformationSetsItemProvider != null) transformationSetsItemProvider.dispose();
		if (transformationSetItemProvider != null) transformationSetItemProvider.dispose();
		if (transformationSetExtensionItemProvider != null) transformationSetExtensionItemProvider.dispose();
		if (transformationItemProvider != null) transformationItemProvider.dispose();
		if (selfRequirementItemProvider != null) selfRequirementItemProvider.dispose();
		if (parentRequirementItemProvider != null) parentRequirementItemProvider.dispose();
		if (customRequirementItemProvider != null) customRequirementItemProvider.dispose();
		if (externalTransformationItemProvider != null) externalTransformationItemProvider.dispose();
	}

}
